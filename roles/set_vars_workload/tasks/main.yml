# Set default workload settings
- name: set num_threads to fixed workload setting
  set_fact:
    num_threads: "{{ workload_fixed_settings['threads'] }}"

- name: set num_operations to fixed workload setting
  set_fact:
    num_operations: "{{ workload_fixed_settings['num_operations'] }}"

- name: set bench_workload_name to fixed workload setting
  set_fact:
    bench_workload_name: "{{ workload_fixed_settings['bench_workload_name'] }}"

- name: set cool_down_time to workload fixed setting
  set_fact:
    cool_down_time: "{{workload_fixed_settings['cool_down_time']}}"

# Set workload session settings
- name: set num_threads to workload threads
  set_fact:
    num_threads: "{{ workload_settings[workload]['threads']}}"
  when: workload_settings[workload]['threads'] is defined

- name: set num_operations to workload num_operations
  set_fact:
    num_operations: "{{ workload_settings[workload]['num_operations'] }}"
  when: workload_settings[workload]['num_operations'] is defined

- name: set bench_workload to workload bench_workload_name
  set_fact:
    bench_workload_name : "{{workload_settings[workload]['bench_workload_name']}}"
  when: workload_settings[workload]['bench_workload_name'] is defined

- name: set cool_down_time to workload cool_down_time
  set_fact:
    cool_down_time: "{{workload_settings[workload]['cool_down_time']}}"
  when: workload_settings[workload]['cool_down_time'] is defined

- name: Create workload results dir if it does not exist
  file:
    path: "{{ session_results_dir }}/{{ workload }}"
    state: directory

- name: Find current workload repetition
  find:
    paths: "{{ session_results_dir }}/{{ workload }}"
    file_type: directory
    use_regex: yes
    patterns: "repetition-[0-9]+"
  register: find_workload_repetition

- name: Set workload repetition fact
  set_fact:
    workload_repetition: "{{find_workload_repetition['matched']}}"

- name: Set workload results dir for repetition
  set_fact:
    workload_results_dir: "{{ session_results_dir }}/{{ workload }}/repetition-{{workload_repetition}}"

- name: Create workload repetition results dir
  file:
    path: "{{workload_results_dir}}"
    state: directory

- name: set dstat_output_file
  set_fact:
    dstat_output_file: "{{workload_results_dir}}/dstat.csv"

- name: set temp_output_file
  set_fact:
    temp_output_file: "{{workload_results_dir}}/temp.csv"

- name: set io_output_file
  set_fact:
    io_output_file: "{{workload_results_dir}}/io.json"

- name: set energy_output_file
  set_fact:
    energy_output_file: "{{workload_results_dir}}/energy"

- name: set bench_log
  set_fact:
    bench_log: "{{workload_results_dir}}/bench-log.log"

- name: set rocksdb_log_file
  set_fact:
    rocksdb_log_file: "{{workload_results_dir}}/rocksdb.log"

# screen session name variables
- name: Set dstat screen session name
  set_fact:
    dstat_screen_name: "dstat-{{ session_name }}-{{hostvars[inventory_hostname]['ansible_date_time']['iso8601']}}"

- name: Set temperature screen session name
  set_fact:
    temp_screen_name:  "temp-{{ session_name }}-{{hostvars[inventory_hostname]['ansible_date_time']['iso8601']}}"

- name: Set IO screen session name
  set_fact:
    io_screen_name: "io-{{ session_name }}-{{hostvars[inventory_hostname]['ansible_date_time']['iso8601']}}"

- name: Set energy screen session name
  set_fact:
    energy_screen_name:  "energy-{{ session_name }}-{{hostvars[inventory_hostname]['ansible_date_time']['iso8601']}}"

#There was a problem when combining two consecutive different workloads.
#Now we demultiplex by workload. If the deltas of the second workload were different, the previous version would maintain the deltas of the previous
#Now we multiplex and demultiplex by workload.
- name: Get session map for variable db_bench options
  set_fact:
    session_options: "{{ session_options | default({}) | combine({ workload : db_bench_session_options[workload]}) }}"
  when: db_bench_session_options[workload] is defined

# Renaming variables (special case where there is a need to rename and not possible to decide output file name)
- name: set sys-energy-workload
  set_fact:
    sys_energy_file: "{{workload_results_dir}}/sys-energy.csv"

- name: set pid-energy-workload
  set_fact:
    pid_energy_file: "{{workload_results_dir}}/pid-energy.csv"

- name: set sys-hardware-workload
  set_fact:
    sys_hardware_file: "{{workload_results_dir}}/sys-hardware.csv"

- name: Set db-log file
  set_fact:
    db_log_file: "{{workload_results_dir}}/db-log.log"

  #The energy_report script generates various files with the same energy_report_file prefix
  #We want to know how many repetitions we have so only find one specific file from the
  #various files created
- name: Set energy-report file
  set_fact:
    energy_report_file: "{{workload_results_dir}}/energy-report"

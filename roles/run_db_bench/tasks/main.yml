- name: Get cgroup version
  shell: |
    [ $(stat -fc %T /sys/fs/cgroup/) = "cgroup2fs" ] && echo "unified" || ( [ -e /sys/fs/cgroup/unified/ ] && echo "hybrid" || echo "legacy")
  register: cgroup_version_out

- name: Fail if cgroup version is not unified
  fail:
    msg: Unified cgroup v2 not detected. Do not accept another version. Only tested this version throughly.
  when: cgroup_version_out.stdout_lines[0] != 'unified'

- name: Register available controllers
  shell: cat /sys/fs/cgroup/cgroup.controllers
  register: available_controllers_out

- name: Fail if cpuset Controller not available
  fail:
    msg: Cpuset controller not available. Not safe to run benchmark without limiting allowed cpus.
  when: available_controllers_out.stdout.find('cpuset') == -1

- name: Fail if memory Controller not available
  fail:
    msg: Memory controller not available. Not safe to run benchmark without limiting memory.
  when: available_controllers_out.stdout.find('memory') == -1

- name: Create db dir if not exists
  file:
    path: "{{ db_dir }}"
    state: directory

# For now it will not be able to add aditional flags just to test the setup1 workload
# Pipe operation has precedence when it comes to division
- name: Call db_bench
  shell: |
    sudo numactl -m {{ numa_node_set }} \
    systemd-run --setenv=LD_PRELOAD={{ energy_tool_client }} --setenv=ALLOWED_CPUS={{ allowed_cpus }} --scope -p MemoryLimit={{ memory_limit }} -p MemoryAccounting=true -p AllowedCPUs={{ allowed_cpus }} \
    {{ build_dir }}/db_bench --benchmarks="{{ bench_workload_name }},sstables" \
                             --num={{ ( (num_operations|int)/ (num_threads|int) ) | round | int}} \
                             --threads={{ num_threads }} \
                             --db={{db_dir}} \
                             {{ db_bench_options_string }}
  args:
    chdir: "{{ workload_results_dir }}"
  become: yes
  register: execution_out

- name: Write db_bench log
  lineinfile:
    path: "{{ bench_log }}"
    line: "{{ (execution_out.stderr_lines + execution_out.stdout_lines) | join('\n') }}"
    create: yes

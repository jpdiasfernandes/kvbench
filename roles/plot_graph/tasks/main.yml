- name: Pcp version
  shell: |
    pcp dstat --version | head -1 | grep -Eo "[0-9]+\\.[0-9]+\\.[0-9]+"
  register: pcp_version

- name: Fix pcp dstat output csv when versions is lower than 5.2.5
  shell: |
    python3 {{utils_dir}}/fix_pcp_dstat.py {{dstat_output_file}}
  when: pcp_version.stdout_lines[0] is version('5.2.5', '<')

- name: Plot dstat graphs
  shell: |
    python3 {{utils_dir}}/plot.py {{dstat_output_file}}

- name: Plot throughput graph
  shell: |
    python3 {{utils_dir}}/plot_throughput.py {{bench_log}}

- name: Plot temperature graph
  shell: |
    python3 {{utils_dir}}/plot_temp.py {{temp_output_file}}

- name: Find process name
  shell: |
     ls -t pid-*.csv | head -1
  args:
    chdir: "{{ workload_results_dir }}"
  register: energy_pid_file


- name: Debug last pid measurement
  debug:
    msg: "{{ energy_pid_file.stdout_lines[0] | trim }}"

- name: Plot energy graph
  plot_energy:
    energy_file: "{{ energy_pid_file.stdout_lines[0] | trim }}"
    event_file: "{{rocksdb_log_file}}"
    chdir: "{{ workload_results_dir }}"
    output_prefix: "{{energy_output_file}}"

  register: out_plot_energy
  ignore_errors: True

- name: Get workload with repetition in first repetition
  set_fact:
    workload_repetition: "{{workload}}"
  when: find_plots_merged['matched'] == 0

- name: Get workload with repetition when repeating
  set_fact:
    workload_repetition: "{{workload}}-{{find_plots_merged['matched']}}"
  when: find_plots_merged['matched'] != 0


- name: Parse the Compaction size info from LOG
  parse_compaction_size_info:
    log_file: "{{db_log_file}}"
    output: "{{event_size_file}}"
    chdir: "{{workload_results_dir}}"



- name: Plot energy reports
  generate_energy_report:
    energy_file: "{{ energy_pid_file.stdout_lines[0] | trim }}"
    event_file: "{{ rocksdb_log_file }}"
    event_size_file: "{{event_size_file}}.log"
    chdir: "{{ workload_results_dir }}"
    output: "{{ energy_report_file }}"
  ignore_errors: true

#This way of finding all the files of a repetition by
#using regex is not standard. It will make refactoring difficult
#also. Maybe make a folder for each repetition
- name: Merge all the output files to a summary plot image
  image_packing:
    image_paths:
      - "{{workload_results_dir}}/bench-log-{{workload_repetition}}-throughput.png"
      - "{{workload_results_dir}}/dstat-{{workload_repetition}}-cpu.png"
      - "{{workload_results_dir}}/dstat-{{workload_repetition}}-disk.png"
      - "{{workload_results_dir}}/dstat-{{workload_repetition}}-mem.png"
      - "{{workload_results_dir}}/energy-{{workload_repetition}}-acc-energy.png"
      - "{{workload_results_dir}}/energy-{{workload_repetition}}-compaction-energy.png"
      - "{{workload_results_dir}}/energy-{{workload_repetition}}-foreground-energy.png"
      - "{{workload_results_dir}}/energy-{{workload_repetition}}-pids-energy.png"
      - "{{workload_results_dir}}/energy-{{workload_repetition}}-tids-energy-events.png"
      - "{{workload_results_dir}}/energy-{{workload_repetition}}-tids-energy.png"
      - "{{workload_results_dir}}/energy-report-{{workload_repetition}}.png"
    output: "{{plots_merged_file}}"
    chdir: "{{workload_results_dir}}"
  ignore_errors: true

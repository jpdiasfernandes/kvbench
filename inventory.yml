all:
  hosts:
    cloud148:
      ansible_host: cloud148.cluster.lsd.di.uminho.pt
    alibaba:
      ansible_host: alibaba.cluster.lsd.di.uminho.pt

  vars:
    kvbench_version: 1.0.3
    # Dirs and files
    local_dir: /home/jpdiasfernandes/Projetos/Dissertação
    ansible_user: gsd
    uname_r: 5.15.0-89-generic
    main_dir: /home/gsd
    db_name: rocksdb
    app_dir: /home/gsd/Apps
    kvbench_dir: "{{ app_dir }}/kvbench"
    erm_dir: "{{ app_dir }}/erm"
    erm_bin: "{{ erm_dir }}/build"
    source_dir: "{{ app_dir }}/rocksdb"
    build_dir: "{{ source_dir }}/build"
    results_dir: "{{ main_dir }}/setup_results"
    utils_dir: "{{ main_dir }}/scripts"
    db_dir: "{{ main_dir }}/mnt-tmpfs/db/rocksdb"
    db_backup_dir: "{{main_dir}}/mnt-nvme/db_backup/rocksdb"
    energy_tool_dir: "{{app_dir}}/software-defined-power"
    energy_tool_bin: "{{ energy_tool_dir }}/build"
    energy_tool_server: "sdpmonserver"
    energy_tool_client: "/usr/local/lib/libsdpmonclient.so"
    energy_tool_config: "{{kvbench_dir}}/configs/sdpower.conf"
    ssh_local_git: /home/jpdiasfernandes/.ssh/id_ed25519.pub
    #repo_url_base: https://github.com/jpdiasfernandes/kvs-energy-bench/tree/main/rocksdb/alibaba/long_tests

    # Cmake version
    cmake_version: 3.22.2

    #When to execute the playbook in remote host
    time_of_day: now

    # System apt dependencies
    apt_pkg_deps:
              - libfmt-dev
              - libsnappy-dev
              - libssl-dev
              - libgflags-dev
              - libspdlog-dev
              - zlib1g-dev
              - libbz2-dev
              - liblz4-dev
              - libzstd-dev
              - pandoc
              - cgroup-tools
              - numactl
              - pcp
              - screen
              - pkg-config
              - libndctl-dev
              - libdaxctl-dev
              - linux-tools-common
              - linux-tools-{{ uname_r }}
              - python3-pip
              - python3-matplotlib
              - python3-pandas
              - lm-sensors
              - at
              - curl
              - libcurl4-openssl-dev
              - python3-ply


    # Session name change whenever
    # When playbooks are called through run-remote (i.e. locally inside the remote host) its needed
    # to set this variable since its not supported the overlay of ansible variables passed through
    # the command line to run-remote playbool
    session_name: run-memory-tests

    io_monitor_sample_period: 0.1
    io_monitor_pid_name: db_bench
    # Systems hardware limitations
    memory_limit: 120G
    numa_node_set: 0
    allowed_cpus: 0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46

    workload_fixed_settings:
      num_operations: 100000000
      threads: 16
      bench_workload_name: ycsbwkldc
      cool_down_time: 80

    # Workload db_bench options
    workload_settings:
      delta_base_50_50_zipf:
        bench_workload_name: ycsbwklda
      delta_base_50_50:
        bench_workload_name: ycsbwklda
      delta_base_25_75_zipf:
        bench_workload_name: ycsbwkldh
      delta_base_25_75:
        bench_workload_name: ycsbwkldh
      delta_base_75_25_zipf:
        bench_workload_name: ycsbwkldg
      delta_base_75_25:
        bench_workload_name: ycsbwkldg
      delta_base_66_33:
        bench_workload_name: ycsbwkldf
      delta_base_66_33_zipf:
        bench_workload_name: ycsbwkldf
      delta_base_100_0_zipf:
        bench_workload_name: ycsbwkldc
      delta_base_100_0:
        bench_workload_name: ycsbwkldc
      delta_base_0_100_zipf:
        bench_workload_name: ycsbwkldi
      delta_base_0_100:
        bench_workload_name: ycsbwkldi
      delta_base_b:
        bench_workload_name: ycsbwkldb
      delta_base_b_zipf:
        bench_workload_name: ycsbwkldb
      delta_base_e:
        bench_workload_name: ycsbwklde
      delta_base_e_zipf:
        bench_workload_name: ycsbwklde
      delta_base_d:
        bench_workload_name: ycsbwkldd
      delta_base_d_zipf:
        bench_workload_name: ycsbwkldd

      ycsbfill_5M:
        threads: 1
        bench_workload_name: ycsbfill
        cool_down_time: 15
      fillrandom_100M:
        num_operations: 100000000
        threads: 1
        bench_workload_name: fillrandom
        cool_down_time: 15
      fillrandom_200M:
        num_operations: 200000000
        threads: 1
        bench_workload_name: fillrandom
        cool_down_time: 15
      write_intensive:
        threads: 4
        bench_workload_name: ycsbwklda
      Readonly_4T:
        threads: 4
        bench_workload_name: ycsbwkldc
      95-5_4T:
        threads: 4
        bench_workload_name: ycsbwkldd
################Concurrency delta tests###############
      #foreground threads param
      delta_1T:
        threads: 1
      delta_2T:
        threads: 2
      delta_4T:
        threads: 4
      delta_8T:
        threads: 8
      delta_32T:
        threads: 32
      delta_64T:
        threads: 64
      delta_128T:
        threads: 128
      delta_1T_zipf:
        threads: 1
      delta_2T_zipf:
        threads: 2
      delta_4T_zipf:
        threads: 4
      delta_8T_zipf:
        threads: 8
      delta_32T_zipf:
        threads: 32
      delta_64T_zipf:
        threads: 64
      delta_128T_zipf:
        threads: 128

###############Workload delta tests###############
      #bench_workload_name param
      delta_B:
        bench_workload_name: ycsbwkldb
      delta_C:
        bench_workload_name: ycsbwkldc
      delta_D:
        bench_workload_name: ycsbwkldd

    # Db_bench fixed options
    db_bench_fixed_options:
            #Change based on available memory. Should be around 1/3 of available memory
            #Number of bytes to use as a cache of uncompressed data (AKA Block cache size)
            cache_size: 1073741824
            #Algorithm to use to compress the database (snappy, zlib, bzip2, lz4, lz4hc, xpress, zstd)
            compression_type: none
            #Ratio of memtable size used for bloom filter. 0 means no bloom filter
            memtable_bloom_size_ratio: 0
            #Controls the total write rate of compaction and flush in bytes per second. Only flush and compaction.
            rate_limiter_bytes_per_sec: 0
            #Enable dynamic adjustment of rate limit according to demand for background I/O
            rate_limiter_auto_tuned: False
            #If the level size is dynamic. (based on the last level size) or not
            level_compaction_dynamic_level_bytes: False
            #The maximum number of concurrent background compactions that can occur in parallel
            #Should be max(n_cores, disk_throughput/avg_thread_compaction_throughput)
            max_background_compactions: 4
            #The maximum number of concurrent background compactions that can occur in parallel
            max_background_flushes: 1
            #Allows OS to incrementally sync SST files to disk while they are being written, in the background.
            #Issue one request for every bytes_per_sync written. 0 turns it off.
            bytes_per_sync: 0
            #Same as bytes_per_sync for wal writes.
            wal_bytes_per_sync: 0
            #If true do not use WAL
            disable_wal: false
            #In Level-based compaction, it Determines which file from a level to be picked to merge to the next level.
            #From what i've seen in the source code kMinOverlappingRatio is the default. However in the
            #docs they seem to mention kByCompensatedSize is the default.
            # 0 - kByCompensatedSize (prioritize files with the most tombstones)
            # 1 - kOldestLargestSeqFirst (for workloads that update some hot keys in small ranges)
            # 2 - kOldestSmallestSeqFirst (for uniform updates across the key space)
            # 3 - kMinOverlappingRatio (looks at ratio between overlapping size in next level and its size) default
            compaction_pri: 3
            #Number of bytes in a block
            block_size: 4096
            #Cache index/filter blocks in block cache. For performance it is recommended for it to be true
            cache_index_and_filter_blocks: False
            #Pin index/filter blocks of L0 files in block cache so they dont get evicted. For performance it is recommended to be true
            pin_l0_filter_and_index_blocks_in_cache: True
            #Size in bytes of single memtable
            write_buffer_size:  134217728
            #The number of in-memory memtables
            max_write_buffer_number: 2
            #The minimum number of memtables that will be merged before being flushed.
            min_write_buffer_number_to_merge: 1
            #The number of sstable files in level 0 for a compaction to level 1 to start.
            #It is possible to estimate a level 0 size by doing → write_buffer_size * min_write_buffer_number_to_merge * level0_file_num_compaction_trigger
            level0_file_num_compaction_trigger: 4
            #Max number of bytes in level 1. It is recommended to be around the same size of level 0
            max_bytes_for_level_base: 268435456
            #Multiplier to get the size of levels bigger than 1
            max_bytes_for_level_multiplier: 10
            #Size of a sstable in level 1
            target_file_size_base: 134217728
            #Multiplier to get the size of sstables when level ≥ 2. The default is 1 so sstables are the same in all levels.
            target_file_size_multiplier: 1
            #The total number of levels
            num_levels: 7
            #Style of compaction.
            #Level → 0
            #Universal → 1
            #FIFO → 2
            #None → 3
            compaction_style: 0
            #Number of files in level-0 that will slowdown writes
            level0_slowdown_writes_trigger: 20
            #Number of files in level-0 that will stop writes
            level0_stop_writes_trigger: 36
            #The percentage of the database we want to compress. If -1 then everything is compressed. If > 0 the percentage will be guaranteed
            universal_compression_size_percent: -1
            #Allow trivial move in universal compaction
            universal_allow_trivial_move: False
            #Bloom filter bits per key. Negative means default = 10 bits per key
            bloom_bits: -1
            #Number of shards for block cache (uncompressed cache) is 2**cache_numshardbits). If rocksdb is bottleneck in cache lock contention increase number of shards.
            cache_numshardbits: 6
            #Number of files that can be used by the DB. If -1 then all files will be kept open. If working set is big then set a realistic number. A high value or -1 can cause high memory usage.
            open_files: -1
            #Sync all writes to disk. Similar semantics to write followed by fdatasync()
            sync: False
            #Format version of SST files (Recommended latest version)
            format_version: 6
            # Cannot use block_align with compression
            block_align: false
            key_size: 16
            value_size: 1024
            stats_interval_seconds: 1
            stats_dump_period_sec: 300
            histogram: True
            max_total_wal_size: 0
            use_existing_db: True
            YCSB_uniform_distribution: True
            duration: 720  # Time in seconds for the random-ops tests to run. When 0 then num & reads determine the test duration
            #Algorithm to use for WAL compression
            wal_compression: none
            #If non-negative, compression starts from this level. Levels with number < min_level_to_compress are not compressed. Otherwise, apply compression_type to all levels.
            min_level_to_compress: -1
            #If non-empty and min_level_to_compress == -1, compression on these levels is activated
            #Example: "0;1;6;7" means levels 0,1,6 and 7 are going to be compressed.
            levels_to_compress: ""


    # Db_bench variable options depending on workload
    db_bench_session_options:
      fillrandom_100M:
        use_existing_db: False
        YCSB_uniform_distribution: True
        duration: 0
      fillrandom_200M:
        use_existing_db: False
        YCSB_uniform_distribution: True
        duration: 0
      write_intensive:
        duration: 60
      read_intensive:
        duration: 60
      Readonly_4T:
        duration: 120
      95-5_4T:
        duration: 120
###############Base Test###############
      #50-50_base_test:
      #  duration: 300
###############Memory delta tests#################
      #cache_size param
      delta_cache_512MB:
        cache_size: 536870912
      delta_cache_1G:
        cache_size: 1073741824
      delta_cache_2G:
        cache_size: 2147483648
      delta_cache_4G:
        cache_size: 4294967296
      delta_cache_8G:
        cache_size: 8589934592
      delta_cache_16G:
        cache_size: 17179869184
      delta_cache_base_zipf:
        YCSB_uniform_distribution: False
      delta_cache_512MB_zipf:
        cache_size: 536870912
        YCSB_uniform_distribution: False
      delta_cache_1G_zipf:
        cache_size: 1073741824
        YCSB_uniform_distribution: False
      delta_cache_2G_zipf:
        cache_size: 2147483648
        YCSB_uniform_distribution: False
      delta_cache_4G_zipf:
        cache_size: 4294967296
        YCSB_uniform_distribution: False
      delta_cache_8G_zipf:
        cache_size: 8589934592
        YCSB_uniform_distribution: False
      delta_cache_16G_zipf:
        cache_size: 17179869184
        YCSB_uniform_distribution: False
      #cache_index_and_filter_blocks
      delta_cache_index_filter_true:
        cache_index_and_filter_blocks: True
      #write_buffer_size
      delta_write_buffer_size_64M:
        write_buffer_size:  67108864
      delta_write_buffer_size_256M:
        write_buffer_size: 268435456
      delta_write_buffer_size_512M:
        write_buffer_size: 536870912
      delta_write_buffer_size_1G:
        write_buffer_size:  1073741824
      delta_write_buffer_size_2G:
        write_buffer_size:  2147483648
      delta_write_buffer_size_base_zipf:
        YCSB_uniform_distribution: False
      delta_write_buffer_size_64M_zipf:
        write_buffer_size:  67108864
        YCSB_uniform_distribution: False
      delta_write_buffer_size_256M_zipf:
        write_buffer_size: 268435456
        YCSB_uniform_distribution: False
      delta_write_buffer_size_512M_zipf:
        write_buffer_size: 536870912
        YCSB_uniform_distribution: False
      delta_write_buffer_size_1G_zipf:
        write_buffer_size:  1073741824
        YCSB_uniform_distribution: False
      delta_write_buffer_size_2G_zipf:
        write_buffer_size:  2147483648
        YCSB_uniform_distribution: False

      #max_write_buffer_number
      delta_max_write_buffer_number_1:
        max_write_buffer_number: 1
      delta_max_write_buffer_number_4:
        max_write_buffer_number: 4
      delta_max_write_buffer_number_8:
        max_write_buffer_number: 8
      delta_max_write_buffer_number_base_zipf:
        YCSB_uniform_distribution: False
      delta_max_write_buffer_number_1_zipf:
        max_write_buffer_number: 1
        YCSB_uniform_distribution: False
      delta_max_write_buffer_number_4_zipf:
        max_write_buffer_number: 4
        YCSB_uniform_distribution: False
      delta_max_write_buffer_number_8_zipf:
        max_write_buffer_number: 8
        YCSB_uniform_distribution: False
      #max_background_compactions param
      delta_compactions_1:
        max_background_compactions: 1
      delta_compactions_2:
        max_background_compactions: 2
      delta_compactions_8:
        max_background_compactions: 8
      delta_compactions_16:
        max_background_compactions: 16
      delta_compactions_1_zipf:
        max_background_compactions: 1
        YCSB_uniform_distribution: False
      delta_compactions_2_zipf:
        max_background_compactions: 2
        YCSB_uniform_distribution: False
      delta_compactions_8_zipf:
        max_background_compactions: 8
        YCSB_uniform_distribution: False
      delta_compactions_16_zipf:
        max_background_compactions: 16
        YCSB_uniform_distribution: False
      delta_1T_zipf:
        YCSB_uniform_distribution: False
      delta_2T_zipf:
        YCSB_uniform_distribution: False
      delta_4T_zipf:
        YCSB_uniform_distribution: False
      delta_8T_zipf:
        YCSB_uniform_distribution: False
      delta_32T_zipf:
        YCSB_uniform_distribution: False
      delta_64T_zipf:
        YCSB_uniform_distribution: False
      delta_128T_zipf:
        YCSB_uniform_distribution: False

      #max_background_flushes param
      delta_flushes_2:
        max_background_flushes: 2
        max_write_buffer_number: 2
      delta_flushes_4:
        max_background_flushes: 4
        max_write_buffer_number: 4
      delta_flushes_2_zipf:
        max_background_flushes: 2
        max_write_buffer_number: 2
        YCSB_uniform_distribution: False
      delta_flushes_4_zipf:
        max_background_flushes: 4
        max_write_buffer_number: 4
        YCSB_uniform_distribution: False
      delta_base_50_50_zipf:
        YCSB_uniform_distribution: False
      delta_base_25_75_zipf:
        YCSB_uniform_distribution: False
      delta_base_66_33_zipf:
        YCSB_uniform_distribution: False
      delta_base_75_25_zipf:
        YCSB_uniform_distribution: False
      delta_base_100_0_zipf:
        YCSB_uniform_distribution: False
      delta_base_0_100_zipf:
        YCSB_uniform_distribution: False
      delta_base_b_zipf:
        YCSB_uniform_distribution: False
      delta_base_d_zipf:
        YCSB_uniform_distribution: False
      delta_base_e_zipf:
        YCSB_uniform_distribution: False





###############Background delta tests###############
      #compaction_style param
      delta_compaction-style_universal:
        compaction_style: 1
      delta_compaction-style_universal_zipf:
        compaction_style: 1
        YCSB_uniform_distribution: False
      delta_compaction-style_base_zipf:
        YCSB_uniform_distribution: False
      #sync param
      delta_sync_1:
        sync: True
        use_fsync: True
      delta_sync_1_zipf:
        sync: True
        use_fsync: True
        YCSB_uniform_distribution: False
      delta_sync_10:
        sync: True
        use_fsync: True
        fsync_period: 10
      delta_sync_10_zipf:
        sync: True
        use_fsync: True
        fsync_period: 10
        YCSB_uniform_distribution: False
      delta_sync_100:
        sync: True
        use_fsync: True
        fsync_period: 100
      delta_sync_100_zipf:
        sync: True
        use_fsync: True
        fsync_period: 100
        YCSB_uniform_distribution: False
      delta_sync_1000:
        sync: True
        use_fsync: True
        fsync_period: 1000
      delta_sync_1000_zipf:
        sync: True
        use_fsync: True
        fsync_period: 1000
        YCSB_uniform_distribution: False
      delta_sync_10000:
        sync: True
        use_fsync: True
        fsync_period: 10000
      delta_sync_10000_zipf:
        sync: True
        use_fsync: True
        fsync_period: 10000
        YCSB_uniform_distribution: False
      delta_sync_base_zipf:
        YCSB_uniform_distribution: False

###############Workload delta tests###############
      #key_size param
      delta_key_size_64:
        key_size: 64
      delta_key_size_128:
        key_size: 128
      delta_key_size_512:
        key_size: 512
      delta_key_size_1K:
        key_size: 1024
      #value_size param
      delta_value_size_512:
        value_size: 512
      delta_value_size_16K:
        value_size: 16384
      delta_value_size_256K:
        value_size: 262144
      delta_value_size_1M:
        value_size: 1024000
      #YCSB_uniform_distribution param
      delta_YCSB_uniform_false:
        YCSB_uniform_distribution: False
###############Misc delta tests###############
      delta_wal_compression_on:
        wal_compression: snappy
      delta_min_level_to_compress_1:
        min_level_to_compress: 1
        compression_type: snappy
      delta_min_level_to_compress_2:
        min_level_to_compress: 2
        compression_type: snappy
      delta_min_level_to_compress_3:
        min_level_to_compress: 3
        compression_type: snappy
      delta_min_level_to_compress_4:
        min_level_to_compress: 4
        compression_type: snappy
      delta_min_level_to_compress_5:
        min_level_to_compress: 5
        compression_type: snappy
      delta_min_level_to_compress_6:
        min_level_to_compress: 6
        compression_type: snappy
      delta_min_level_to_compress_7:
        min_level_to_compress: 7
        compression_type: snappy
      delta_compress_0_1:
        levels_to_compress: "0;1"
        compression_type: snappy
